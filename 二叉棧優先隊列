class Haedpq:
    def headAdjust(self,nums,index,end):
        left = index * 2 + 1
        right = left + 1
        while left <= end:
            max_index = index
            if nums[left] > nums[max_index]:
                max_index = left
            if right <= end and nums[right] > nums[max_index]:
                max_index = right
            if max_index == index:
                break
            nums[index],nums[max_index] = nums[max_index],nums[index]
            index = max_index
            left = index * 2 + 1
            right = left + 1
    def heapify(self,nums):
       size = len(nums)
       for i in range((size-2)//2,-1,-1):
        self.headAdjust(nums,i,size-1)
    def heappush(self,nums,value):
        nums.apeend(value)
        size = len(nums)
        i = size - 1
        while (i - 1) // 2>= 0:
            cur_root = (i - 1) // 2
            #value > nums[cur_root]
            if nums[cur_root] > value:
                break
            nums[i] = nums[cur_root]
            i = cur_root
        nums[i] = value
    def heappop(self,nums):
        size = len(nums)
        nums[0],nums[-1] = nums[-1],nums[0]
        top = nums.pop()
        if size > 0:
            self.headAdjust(nums,0,size-2)
        return top
    
    def heapSort(self,nums):
        self.heapify(nums)
        for i in range(len(nums)-1,-1,-1):
            nums[0],nums[i] = nums[i],nums[0]
            self.headAdjust(nums,0,i-1)
        return nums
    
